{"version":3,"file":"static/js/index.js","sources":["/Users/VojtaTrainProgramming/Documents/IMKS/imks/api/mockdata.ts","/Users/VojtaTrainProgramming/Documents/IMKS/imks/entity/entity.tsx","/Users/VojtaTrainProgramming/Documents/IMKS/imks/src/App.tsx","/Users/VojtaTrainProgramming/Documents/IMKS/imks/src/main.tsx","/Users/VojtaTrainProgramming/Documents/IMKS/imks/store/slices/channelsSlice.ts","/Users/VojtaTrainProgramming/Documents/IMKS/imks/store/slices/settingsSlice.ts","/Users/VojtaTrainProgramming/Documents/IMKS/imks/store/storeRedux.ts","/Users/VojtaTrainProgramming/Documents/IMKS/imks/utils/typeGuards.ts"],"sourcesContent":["import dayjs from \"dayjs\";\nimport { ChanellColors, ChannelActionType, ImksState } from \"../entity/entity\";\n\nexport const initialChannelState: ImksState[\"channels\"] = {\n  1: {\n    id: 1,\n    channelActionType: ChannelActionType.NotSelected,\n    channelSettings: {\n      title: \"Modrá barva\",\n      expanded: true,\n      color: \"primary\",\n    },\n  },\n  2: {\n    id: 2,\n    channelActionType: ChannelActionType.Light,\n    channelSettings: {\n      title: \"Test barva\",\n      expanded: true,\n      color: \"secondary\",\n    },\n    allIds: [1, 2, 3, 4, 5, 6],\n    lastIncrementedId: 6,\n    slidersData: {\n      1: { sliderId: 1, intensity: 40, time: \"9:00\" },\n      2: { sliderId: 2, intensity: 40, time: \"10:00\" },\n      3: { sliderId: 3, intensity: 60, time: \"15:00\" },\n      4: { sliderId: 4, intensity: 60, time: \"17:00\" },\n      5: { sliderId: 5, intensity: 20, time: \"19:00\" },\n      6: { sliderId: 6, intensity: 20, time: \"22:00\" },\n    },\n  },\n  3: {\n    id: 3,\n    channelSettings: {\n      title: \"Červená barva\",\n      expanded: true,\n      color: \"error\",\n    },\n    channelActionType: ChannelActionType.Light,\n    allIds: [1, 2],\n    lastIncrementedId: 1,\n    slidersData: {\n      1: { sliderId: 1, intensity: 40, time: \"19:00\" },\n      2: { sliderId: 2, intensity: 40, time: \"23:00\" },\n    },\n  },\n  4: {\n    id: 4,\n    channelSettings: {\n      title: \"Poslední barva barva\",\n      expanded: true,\n      color: \"error\",\n    },\n    channelActionType: ChannelActionType.Light,\n    allIds: [1, 2],\n    lastIncrementedId: 1,\n    slidersData: {\n      1: { sliderId: 1, intensity: 40, time: \"19:00\" },\n      2: { sliderId: 2, intensity: 40, time: \"23:00\" },\n    },\n  },\n};\nexport const accessibleWifiList = [\n  {\n    id: \"TP-Link_Mocal\",\n    name: \"TP-Link_Mocal\",\n  },\n  {\n    id: \"HomeWifi\",\n    name: \"HomeWifi\",\n  },\n  {\n    id: \"Filip339\",\n    name: \"Filip339\",\n  },\n];\n\nexport const settingsInitialState: ImksState[\"settings\"] = {\n  channelColors: ChanellColors,\n  language: \"cs-CZ\",\n  wifi: {\n    accessibleWifiList,\n    controllerDate: dayjs().format(\" DD.MM.YYYY HH:MM\"),\n    controllerName: \"Obývák\",\n    formDate: dayjs().format(\" DD.MM.YYYY HH:MM\"),\n    ipAddress: \"2001:4860:7:60a::fa\",\n    isAutomaticConnectionChecked: true,\n    isAutomaticTimeChecked: true,\n    operatingMode: \"ClientMode\",\n    password: \"heslohesloano\",\n    wifiName: \"TP-Link_Mocal\",\n    deviceId: \"deviceId tetx\",\n    FWCurrent: \"DFAL232N\",\n    FWFuture: \"KLOIOÉÁSĚ\",\n    isClientModeConnected: true,\n    MACAddress: \"223.323:E2:DD:00\",\n    wifiSignalStrength: 67,\n  },\n};\n\nexport const wifiRegime = [\n  {\n    id: \"ClientMode\",\n    name: \"Client Mode\",\n  },\n  {\n    id: \"APMode\",\n    name: \"Ap Mode\",\n  },\n];\n","import EmojiObjectsIcon from \"@mui/icons-material/EmojiObjects\";\nimport WaterDropIcon from \"@mui/icons-material/WaterDrop\";\nimport QuestionMarkIcon from \"@mui/icons-material/QuestionMark\";\n\nexport type ImksState = {\n  settings: {\n    language: keyof LanguagesType;\n    channelColors: typeof ChanellColors;\n    wifi: WifiForm;\n  };\n  channels: Record<number, ChannelForm>;\n};\n\nexport type ChannelForm = {\n  id: number;\n  channelSettings: {\n    color: ChannelColorsType;\n    title: string;\n    expanded: boolean;\n  };\n} & (LightFormType | FertilizeFormType | NotSelectedActionTypeForm);\n\nexport type LightFormType = {\n  channelActionType: ChannelActionType.Light;\n  allIds: number[];\n  lastIncrementedId: number;\n  slidersData: Record<number, SliderData>;\n};\n\nexport type SliderData = { sliderId: number; intensity: number; time: string };\n\nexport type FertilizeFormType = {\n  channelActionType: ChannelActionType.Fertilize;\n  time: string;\n  fertilizerAmount: number;\n  calibrationCoeficient: number;\n  fertilizeCalendar: FertilizeCalendar;\n};\n\nexport type NotSelectedActionTypeForm = {\n  channelActionType: ChannelActionType.NotSelected;\n};\n\nexport type ChannelColorsType = (typeof ChanellColors)[number];\n\nexport const enum ChannelActionType {\n  Fertilize = \"fertilize\",\n  Light = \"light\",\n  NotSelected = \"notSelected\",\n}\n\ntype FertilizeCalendar = {\n  monday: boolean;\n  tuesday: boolean;\n  wednesday: boolean;\n  thursday: boolean;\n  friday: boolean;\n  saturday: boolean;\n  sunday: boolean;\n};\n\nexport const ChanellColors = [\n  \"primary\",\n  \"secondary\",\n  \"error\",\n  \"default\",\n] as const;\n\nexport type LanguagesType = typeof Languages;\n\nexport const Languages = {\n  \"cs-CZ\": \"Čeština\",\n  \"en-US\": \"English\",\n} as const;\n\nexport const ChannelIcons = {\n  fertilize: <WaterDropIcon />,\n  light: <EmojiObjectsIcon />,\n  notSelected: <QuestionMarkIcon />,\n};\n\nexport type LineChartIntensityData = Record<\n  number,\n  { color: string; legendTitle: string; series: number[] }\n>;\n\nexport type WifiForm = {\n  controllerName: string | undefined;\n  wifiName: string;\n  isAutomaticTimeChecked: boolean;\n  formDate: string;\n  password: string;\n  controllerDate: string;\n  operatingMode: \"ClientMode\" | \"APMode\";\n  accessibleWifiList: AccessibleWifiType[];\n  ipAddress: string;\n  isAutomaticConnectionChecked: boolean;\n  wifiSignalStrength: number;\n  FWCurrent: string;\n  FWFuture: string;\n  MACAddress: string;\n  isClientModeConnected: boolean;\n  deviceId: string;\n};\n\nexport type AccessibleWifiType = { id: string; name: string };\n","import { MenuItem, Select, ThemeProvider } from \"@mui/material\";\nimport { imksTheme } from \"../theme/customeTheme\";\nimport { ImksChannels } from \"../components/channels/ImksChannels\";\nimport HeaderBarMenu from \"../components/headerMenu/HeaderBarMenu\";\nimport LightChart from \"../components/diagram/LightChart\";\nimport { useUpdateLineChart } from \"../hooks/sliderHooks\";\nimport WebSocketComponent from \"./websocket/webSocket\";\nimport { WebSocketProvider } from \"../contextAPI/webSocketContext\";\nimport { useState } from \"react\";\n\n//přidání nového posuvníku...má se přesunou v rámci pořadí ostaních posuvníků dle času?\n\n// umožnit editovat barvy\n\n// umožnit přidávání sliders ke všem kanálů viz   const lineChartData: LineChartIntensityData = {\n//   2: { color: cyan[500], legendTitle: \"Světlo\", series: [] },\n//   3: { color: \"#b6cf55\", legendTitle: \"Hnojení\", series: [] },\n// };\n\n// dodělat překlady\n\n//přidat návod\n\n//kouknout na efektivitu renderů\n\nconst books: Book[] = [\n  { id: \"1\", name: \"Harry Potter\" },\n  { id: \"2\", name: \"Děti z Bulerbinu\" },\n  { id: \"3\", name: \"Míšiny cesty\" },\n  { id: \"4\", name: \"Mikulášovi patálie \" },\n];\nfunction App() {\n  // const { datesData, intensitySeries } = useUpdateLineChart();\n  const [selectedId, setSelectedId] = useState<number>(1);\n\n  return (\n    <SelectField<Book>\n      items={books}\n      keyExtractor={(book) => book.id}\n      labelExtractor={(book) => book.name}\n      value={selectedId}\n      onChange={(value) => setSelectedId(value)}\n    />\n    // <ThemeProvider theme={imksTheme}>\n    //   <WebSocketProvider>\n    //     <WebSocketComponent />\n    //     <HeaderBarMenu />\n    //     <LightChart timeData={datesData} intensityData={intensitySeries} />\n    //     <ImksChannels />\n    //   </WebSocketProvider>\n    // </ThemeProvider>\n  );\n}\nexport default App;\n\ntype Book = {\n  id: s;\n  name: string;\n};\n\ntype Identifiable = {\n  id: string | number;\n  name: string;\n};\n\ntype SelectFieldProps<T extends Identifiable> = {\n  items: T[];\n  value: T[\"id\"];\n  onChange: (value: T[\"id\"]) => void;\n  keyExtractor: (item: T) => string | number;\n  labelExtractor: (item: T) => string;\n};\n\nconst SelectField = <T extends Identifiable>({\n  items,\n  keyExtractor,\n  labelExtractor,\n  value,\n  onChange,\n}: SelectFieldProps<T>) => {\n  return (\n    <Select value={value} onChange={(e) => onChange(e.target.value)}>\n      {items.map((item) => (\n        <MenuItem key={keyExtractor(item)} value={keyExtractor(item)}>\n          {labelExtractor(item)}\n        </MenuItem>\n      ))}\n    </Select>\n  );\n};\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App.tsx\";\nimport { Provider } from \"react-redux\";\nimport appStore from \"../store/storeRedux.ts\";\n\ncreateRoot(document.getElementById(\"root\")!).render(\n  <StrictMode>\n    <Provider store={appStore}>\n      <App />\n    </Provider>\n  </StrictMode>\n);\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport {\n  ChannelActionType,\n  LightFormType,\n  ImksState,\n  FertilizeFormType,\n  ChannelForm,\n} from \"../../entity/entity\";\nimport { initialChannelState } from \"../../api/mockdata\";\nimport { isLightChannel } from \"../../utils/typeGuards\";\n\nconst initialState: ImksState[\"channels\"] = initialChannelState;\ntype channelId = number;\n\nconst initialLightSettings: LightFormType = {\n  channelActionType: ChannelActionType.Light,\n  allIds: [1, 2],\n  lastIncrementedId: 2,\n  slidersData: {\n    1: { sliderId: 1, intensity: 20, time: \"10:00\" },\n    2: { sliderId: 2, intensity: 20, time: \"19:00\" },\n  },\n};\n\nconst initialFertilizeSettings: FertilizeFormType = {\n  channelActionType: ChannelActionType.Fertilize,\n  time: \"9:00\",\n  fertilizerAmount: 20,\n  calibrationCoeficient: 2,\n  fertilizeCalendar: {\n    monday: true,\n    tuesday: false,\n    wednesday: true,\n    thursday: true,\n    friday: false,\n    saturday: true,\n    sunday: true,\n  },\n};\n\nconst channelsSlice = createSlice({\n  name: \"channelsSlice\",\n  initialState: initialState,\n  reducers: {\n    toggleExpandChannel(state, action: PayloadAction<channelId>) {\n      const channelId = action.payload;\n      const currentExpandState = state[channelId].channelSettings.expanded;\n      state[channelId].channelSettings.expanded = !currentExpandState;\n    },\n    saveChannelTitle(\n      state,\n      action: PayloadAction<{ title: string; channelId: channelId }>\n    ) {\n      state[action.payload.channelId].channelSettings.title =\n        action.payload.title;\n    },\n    setCompleteObject(_, action: PayloadAction<Record<number, ChannelForm>>) {\n      return action.payload;\n    },\n    setChannelActionType(\n      state,\n      action: PayloadAction<{\n        channelActionType: ChannelActionType;\n        channelId: channelId;\n      }>\n    ) {\n      const { channelId, channelActionType } = action.payload;\n\n      state[channelId].channelActionType = channelActionType;\n\n      if (channelActionType === \"light\") {\n        state[channelId] = { ...state[channelId], ...initialLightSettings };\n      } else if (channelActionType === \"fertilize\") {\n        state[channelId] = { ...state[channelId], ...initialFertilizeSettings };\n      }\n    },\n    resetChannelActionType(state, action: PayloadAction<channelId>) {\n      const channelId = action.payload;\n\n      state[channelId] = {\n        id: state[channelId].id,\n        channelActionType: ChannelActionType.NotSelected,\n        channelSettings: { ...state[channelId].channelSettings },\n      };\n    },\n    duplicatePreviousSlider(\n      state,\n      action: PayloadAction<{ channelId: number; sliderId: number }>\n    ) {\n      const { channelId } = action.payload;\n      if (isLightChannel(state[channelId])) {\n        // problém s duplikací na zařazení do objektů, na správné místo, možná je řadit dle času automaticky a nehrotit indexy?\n      }\n    },\n    removeSlider(\n      state,\n      action: PayloadAction<{ channelId: number; sliderId: number }>\n    ) {\n      const { channelId, sliderId } = action.payload;\n\n      if (isLightChannel(state[channelId])) {\n        if (sliderId >= 1) {\n          delete state[channelId].slidersData[sliderId];\n          state[channelId].allIds = state[channelId].allIds.filter(\n            (id) => id !== sliderId\n          );\n        }\n      }\n    },\n    setSliderIntensity(\n      state,\n      action: PayloadAction<{\n        channelId: number;\n        sliderId: number;\n        intensity: number;\n      }>\n    ) {\n      const { channelId, sliderId, intensity } = action.payload;\n\n      if (isLightChannel(state[channelId])) {\n        state[channelId].slidersData[sliderId].intensity = intensity;\n      }\n    },\n    addSlider(state, action: PayloadAction<{ channelId: number }>) {\n      const { channelId } = action.payload;\n\n      if (isLightChannel(state[channelId])) {\n        const newIncrementedId = state[channelId].lastIncrementedId + 1;\n        state[channelId].allIds.push(newIncrementedId);\n        state[channelId].lastIncrementedId = newIncrementedId;\n        state[channelId].slidersData[newIncrementedId] = {\n          intensity: 50,\n          time: \"12:00\",\n          sliderId: newIncrementedId,\n        };\n      }\n    },\n    setSliderTime(\n      state,\n      action: PayloadAction<{\n        channelId: number;\n        sliderId: number;\n        time: string;\n      }>\n    ) {\n      const { channelId, sliderId, time } = action.payload;\n\n      if (isLightChannel(state[channelId])) {\n        state[channelId].slidersData[sliderId].time = time;\n      }\n    },\n  },\n});\n\nexport const {\n  toggleExpandChannel,\n  saveChannelTitle,\n  setCompleteObject,\n  setChannelActionType,\n  resetChannelActionType,\n  duplicatePreviousSlider,\n  removeSlider,\n  setSliderIntensity,\n  setSliderTime,\n  addSlider,\n} = channelsSlice.actions;\nexport default channelsSlice.reducer;\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { settingsInitialState } from \"../../api/mockdata\";\n\nconst settingsSlice = createSlice({\n  name: \"settingsSlice\",\n  initialState: settingsInitialState,\n  reducers: {\n    changeLanguage(state, action) {\n      state.language = action.payload;\n    },\n    setWifiDeviceSettings(state, action) {\n      state.wifi = action.payload;\n    },\n  },\n});\n\nexport const { changeLanguage, setWifiDeviceSettings } = settingsSlice.actions;\nexport default settingsSlice.reducer;\n","import { configureStore, createSelector } from \"@reduxjs/toolkit\";\nimport channelsSlice from \"./slices/channelsSlice\";\nimport settingsSlice from \"./slices/settingsSlice\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst appStore = configureStore({\n  reducer: {\n    settings: settingsSlice,\n    channels: channelsSlice,\n  },\n});\n\nexport type AppStoreState = ReturnType<typeof appStore.getState>;\nexport type AppDispatch = typeof appStore.dispatch;\nexport type AppStore = typeof appStore;\nexport default appStore;\n\nexport const useAppDispatch = useDispatch.withTypes<AppDispatch>();\nexport const useAppSelector = useSelector.withTypes<AppStoreState>();\nexport const createAppSelector = createSelector.withTypes<AppStoreState>();\n\nexport const getAppState = () => appStore.getState();\nexport const selectFromAppState = <ImksState>(\n  selector: (state: AppStoreState) => ImksState\n): ImksState => {\n  return selector(getAppState());\n};\n","import {\n  LightFormType,\n  FertilizeFormType,\n  NotSelectedActionTypeForm,\n  ChannelActionType,\n} from \"../entity/entity\";\n\nexport const isLightChannel = (\n  channel: LightFormType | FertilizeFormType | NotSelectedActionTypeForm\n): channel is LightFormType => {\n  return channel.channelActionType === ChannelActionType.Light;\n};\n\nexport const isFertilizeChannel = (\n  channel: LightFormType | FertilizeFormType | NotSelectedActionTypeForm\n): channel is FertilizeFormType => {\n  return channel.channelActionType === ChannelActionType.Fertilize;\n};\nexport const isNotSelectedChannel = (\n  channel: LightFormType | FertilizeFormType | NotSelectedActionTypeForm\n): channel is NotSelectedActionTypeForm => {\n  return channel.channelActionType === ChannelActionType.NotSelected;\n};\n"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9GA;AACA;AACA;AA2CA;;;;AAAA;AAIA;AAYA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;;;;;AACA;;;;;AACA;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/EA;AAQA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;;;;;;AAWA;AArBA;AAAA;AAsBA;AAoBA;AAAA;AAOA;AACA;AAAA;AACA;AACA;AACA;AADA;;;;;;;;;;AAMA;AAhBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTA;AACA;AAOA;AACA;AAEA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAOA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAYA;;;;;;;;;;;;;;;;;;;;;;;;ACtKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAKA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;AC1BA;AAOA;AAGA;AACA;AAEA;AAGA;AACA;AACA;AAGA;AACA"}